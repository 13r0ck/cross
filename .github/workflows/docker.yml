on:
  push:
    branches: [master, staging, trying]
    tags:
      - "v*.*.*"

name: Docker Build

jobs:
  docker-build:
    needs: [docker-builds]
    runs-on: ubuntu-latest
    steps:
      - name: Docker builds done
        run: exit 0
  docker-builds:
    name: ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    env:
      CARGO_NET_RETRY: 3
      CARGO_HTTP_CHECK_REVOKE: false
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
            toolchain: 1.58.1
            os: ubuntu-latest
            cpp: 1
            dylib: 1
            std: 1
            run: 1
            runners: qemu-user qemu-system
          - target: arm-unknown-linux-gnueabi
            toolchain: 1.58.1
            os: ubuntu-latest
            cpp: 1
            dylib: 1
            std: 1
            run: 1
          - target: arm-unknown-linux-gnueabihf
            toolchain: 1.58.1
            os: ubuntu-latest
            cpp: 1
            dylib: 1
            std: 1
            run: 1
          - target: armv7-unknown-linux-gnueabihf
            toolchain: 1.58.1
            os: ubuntu-latest
            cpp: 1
            dylib: 1
            std: 1
            run: 1
            runners: qemu-user qemu-system
          - target: i586-unknown-linux-gnu
            toolchain: 1.58.1
            os: ubuntu-latest
            cpp: 1
            dylib: 1
            std: 1
            run: 1
          - target: i686-unknown-linux-gnu
            toolchain: 1.58.1
            os: ubuntu-latest
            cpp: 1
            dylib: 1
            std: 1
            run: 1
            runners: native qemu-user qemu-system
          - target: mips-unknown-linux-gnu
            toolchain: 1.58.1
            os: ubuntu-latest
            cpp: 1
            dylib: 1
            std: 1
            run: 1
            runners: qemu-user qemu-system
          - target: mipsel-unknown-linux-gnu
            toolchain: 1.58.1
            os: ubuntu-latest
            cpp: 1
            dylib: 1
            std: 1
            run: 1
            runners: qemu-user qemu-system
          - target: mips64-unknown-linux-gnuabi64
            toolchain: 1.58.1
            os: ubuntu-latest
            cpp: 1
            dylib: 1
            std: 1
            run: 1
          - target: mips64el-unknown-linux-gnuabi64
            toolchain: 1.58.1
            os: ubuntu-latest
            cpp: 1
            dylib: 1
            std: 1
            run: 1
            runners: qemu-user qemu-system
          - target: powerpc-unknown-linux-gnu
            toolchain: 1.58.1
            os: ubuntu-latest
            cpp: 1
            dylib: 1
            std: 1
            run: 1
            runners: qemu-user qemu-system
          - target: powerpc64-unknown-linux-gnu
            toolchain: 1.58.1
            os: ubuntu-latest
            cpp: 1
            dylib: 1
            std: 1
            run: 1
            runners: qemu-user qemu-system
          - target: powerpc64le-unknown-linux-gnu
            toolchain: 1.58.1
            os: ubuntu-latest
            cpp: 1
            dylib: 1
            std: 1
            run: 1
            runners: qemu-user qemu-system
          - target: riscv64gc-unknown-linux-gnu
            toolchain: 1.58.1
            os: ubuntu-latest
            cpp: 1
            std: 1
            run: 1
          - target: s390x-unknown-linux-gnu
            toolchain: 1.58.1
            os: ubuntu-latest
            cpp: 1
            dylib: 1
            std: 1
            run: 1
            runners: qemu-system
          - target: sparc64-unknown-linux-gnu
            toolchain: 1.58.1
            os: ubuntu-latest
            cpp: 1
            dylib: 1
            std: 1
            run: 1
            runners: qemu-system
          - target: x86_64-unknown-linux-gnu
            toolchain: 1.58.1
            os: ubuntu-latest
            cpp: 1
            dylib: 1
            std: 1
            run: 1
            runners: native qemu-user qemu-system
            deploy: true
            cargo-publish: 1
          - target: aarch64-unknown-linux-musl
            toolchain: 1.58.1
            os: ubuntu-latest
            std: 1
            run: 1
          - target: arm-unknown-linux-musleabihf
            toolchain: 1.58.1
            os: ubuntu-latest
            std: 1
            run: 1
          - target: arm-unknown-linux-musleabi
            toolchain: 1.58.1
            os: ubuntu-latest
            std: 1
            run: 1
          - target: armv5te-unknown-linux-gnueabi
            toolchain: 1.58.1
            os: ubuntu-latest
            std: 1
            run: 1
          - target: armv5te-unknown-linux-musleabi
            toolchain: 1.58.1
            os: ubuntu-latest
            std: 1
            run: 1
          - target: armv7-unknown-linux-musleabihf
            toolchain: 1.58.1
            os: ubuntu-latest
            std: 1
            run: 1
          - target: i586-unknown-linux-musl
            toolchain: 1.58.1
            os: ubuntu-latest
            std: 1
            run: 1
          - target: i686-unknown-linux-musl
            toolchain: 1.58.1
            os: ubuntu-latest
            std: 1
            run: 1
          - target: mips-unknown-linux-musl
            toolchain: 1.58.1
            os: ubuntu-latest
            cpp: 1
            std: 1
            run: 1
          - target: mipsel-unknown-linux-musl
            toolchain: 1.58.1
            os: ubuntu-latest
            cpp: 1
            std: 1
            run: 1
          - target: x86_64-unknown-linux-musl
            toolchain: 1.58.1
            os: ubuntu-latest
            std: 1
            run: 1
            deploy: true
          - target: aarch64-linux-android
            toolchain: 1.58.1
            os: ubuntu-latest
            cpp: 1
            std: 1
            run: 1
          - target: arm-linux-androideabi
            toolchain: 1.58.1
            os: ubuntu-latest
            cpp: 1
            std: 1
            run: 1
          - target: armv7-linux-androideabi
            toolchain: 1.58.1
            os: ubuntu-latest
            cpp: 1
            std: 1
            run: 1
          - target: i686-linux-android
            toolchain: 1.58.1
            os: ubuntu-latest
            cpp: 1
            std: 1
            run: 1
          - target: x86_64-linux-android
            toolchain: 1.58.1
            os: ubuntu-latest
            cpp: 1
            std: 1
            run: 1
          - target: x86_64-apple-darwin
            toolchain: 1.58.1
            os: macos-latest
            cpp: 1
            dylib: 1
            std: 1
            run: 1
            deploy: true
          - target: x86_64-pc-windows-gnu
            toolchain: 1.58.1
            os: ubuntu-latest
            cpp: 1
            std: 1
            run: 1
          - target: i686-pc-windows-gnu
            toolchain: 1.58.1
            os: ubuntu-latest
            cpp: 1
            std: 1
            run: 1
          # Disabled, see #396
          # - target: x86_64-unknown-dragonfly
          #   toolchain: nightly
          #   os: ubuntu-latest
          #   cpp: 1
          #   dylib: 1
          - target: i686-unknown-freebsd
            toolchain: 1.58.1
            os: ubuntu-latest
            dylib: 1
            std: 1
          - target: x86_64-unknown-freebsd
            toolchain: 1.58.1
            os: ubuntu-latest
            dylib: 1
            std: 1
          - target: x86_64-unknown-netbsd
            toolchain: 1.58.1
            os: ubuntu-latest
            cpp: 1
            dylib: 1
            std: 1
          # Disabled, see #534
          # - target: sparcv9-sun-solaris
          #   toolchain: 1.58.1
          #   os: ubuntu-latest
          #   cpp: 1
          #   dylib: 1
          #   std: 1
          # - target: x86_64-sun-solaris
          #   toolchain: 1.58.1
          #   os: ubuntu-latest
          #   cpp: 1
          #   dylib: 1
          #   std: 1
          # Disabled, see #634
          #- target: asmjs-unknown-emscripten
          #  toolchain: 1.58.1
          #  os: ubuntu-latest
          #  std: 1
          #  run: 1
          # `cargo run` fails with an assertion error (https://github.com/rust-lang/cargo/issues/4689) on `wasm32-unknown-emscripten`.
          # - target: wasm32-unknown-emscripten
          #   toolchain: 1.58.1
          #   os: ubuntu-latest
          #   std: 1
          - target: thumbv6m-none-eabi
            toolchain: 1.58.1
            os: ubuntu-latest
            std: 1
          - target: thumbv7em-none-eabi
            toolchain: 1.58.1
            os: ubuntu-latest
            std: 1
          - target: thumbv7em-none-eabihf
            toolchain: 1.58.1
            os: ubuntu-latest
            std: 1
          - target: thumbv7m-none-eabi
            toolchain: 1.58.1
            os: ubuntu-latest
            std: 1
          - target: x86_64-pc-windows-msvc
            toolchain: 1.58.1
            os: windows-latest
            cpp: 1
            std: 1
            run: 1
            deploy: true

    steps:
      - uses: actions/checkout@v2
      - name: install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}
          default: true
          profile: minimal
      - name: Set up Docker Buildx
        if: runner.os == 'Linux'
        uses: docker/setup-buildx-action@v1
      - name: Expose GitHub runtime
        uses: crazy-max/ghaction-github-runtime@v1.0.0
      - name: Build and push Docker image
        id: build-docker-image
        if: runner.os == 'Linux'
        timeout-minutes: 60
        run: ./build-docker-image.sh "${TARGET}"
        env:
          TARGET: ${{ matrix.target }}
        shell: bash
      - name: Set Docker image for test
        if: steps.build-docker-image.outputs.image
        run: |
          TARGET_VAR="cross_target_${TARGET//-/_}_image"
          echo "${TARGET_VAR^^}=${IMAGE}" | tee -a "${GITHUB_ENV}"
        env:
          TARGET: ${{ matrix.target }}
          IMAGE: ${{ steps.build-docker-image.outputs.image }}
        shell: bash
      - name: Test
        if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/trying'
        run: ./ci/test.sh
        env:
          TARGET: ${{ matrix.target }}
          CPP: ${{ matrix.cpp }}
          DYLIB: ${{ matrix.dylib }}
          STD: ${{ matrix.std }}
          RUN: ${{ matrix.run }}
          RUNNERS: ${{ matrix.runners }}
        shell: bash
      - name: Publish on crates.io
        if: matrix.cargo-publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: ${{ (!startsWith(github.ref, 'refs/tags/v') && '--dry-run') || '' }}
      - name: Create GitHub Release
        if: matrix.deploy && startsWith(github.ref, 'refs/tags/v')
        # TODO: Not sure what package to use for this step.
        run: echo "TODO"; exit 1
      - name: Login to GitHub Container Registry
        if: runner.os == 'Linux'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push image to GitHub Container Registry
        if: runner.os == 'Linux' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v'))
        run: ./build-docker-image.sh --push "${TARGET}"
        env:
          TARGET: ${{ matrix.target }}
        shell: bash
