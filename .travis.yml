language: rust
rust: stable
services:
  - docker
sudo: required

matrix:
  include:
    # Linux
    - env: TARGET=aarch64-unknown-linux-gnu       CPP=1 DYLIB=1 STD=1 OPENSSL=0.5.5  RUN=1 RUNNERS="qemu-user qemu-system"
    - env: TARGET=arm-unknown-linux-gnueabi       CPP=1 DYLIB=1 STD=1 OPENSSL=0.5.5  RUN=1
    - env: TARGET=arm-unknown-linux-gnueabihf     CPP=1 DYLIB=1 STD=1 OPENSSL=0.5.5  RUN=1
    - env: TARGET=armv7-unknown-linux-gnueabihf   CPP=1 DYLIB=1 STD=1 OPENSSL=0.5.5  RUN=1 RUNNERS="qemu-user qemu-system"
    - env: TARGET=i586-unknown-linux-gnu          CPP=1 DYLIB=1 STD=1 OPENSSL=0.5.5  RUN=1
    - env: TARGET=i686-unknown-linux-gnu          CPP=1 DYLIB=1 STD=1 OPENSSL=0.5.5  RUN=1 RUNNERS="native qemu-user qemu-system"
    - env: TARGET=mips-unknown-linux-gnu          CPP=1 DYLIB=1 STD=1 OPENSSL=0.5.5  RUN=1 RUNNERS="qemu-user qemu-system"
    - env: TARGET=mipsel-unknown-linux-gnu        CPP=1 DYLIB=1 STD=1 OPENSSL=0.5.5  RUN=1 RUNNERS="qemu-user qemu-system"
    - env: TARGET=mips64-unknown-linux-gnuabi64   CPP=1 DYLIB=1 STD=1 OPENSSL=0.7.17 RUN=1
    - env: TARGET=mips64el-unknown-linux-gnuabi64 CPP=1 DYLIB=1 STD=1 OPENSSL=0.7.17 RUN=1 RUNNERS="qemu-user qemu-system"
    - env: TARGET=powerpc-unknown-linux-gnu       CPP=1 DYLIB=1 STD=1 OPENSSL=0.5.5  RUN=1 RUNNERS="qemu-user qemu-system"
    - env: TARGET=powerpc64-unknown-linux-gnu     CPP=1 DYLIB=1 STD=1 OPENSSL=0.7.17 RUN=1 RUNNERS="qemu-user qemu-system"
    - env: TARGET=powerpc64le-unknown-linux-gnu   CPP=1 DYLIB=1 STD=1 OPENSSL=0.7.17 RUN=1 RUNNERS="qemu-user qemu-system"
    #- env: TARGET=s390x-unknown-linux-gnu         CPP=1 DYLIB=1 STD=1 OPENSSL=0.7.17 RUN=1 RUNNERS="qemu-system"
    - env: TARGET=sparc64-unknown-linux-gnu       CPP=1 DYLIB=1 STD=1 OPENSSL=0.7.17 RUN=1 RUNNERS="qemu-system"
    - env: TARGET=x86_64-unknown-linux-gnu        CPP=1 DYLIB=1 STD=1 OPENSSL=0.5.5  RUN=1 DEPLOY=1 RUNNERS="native qemu-user qemu-system"

    # Linux musl
    - env: TARGET=aarch64-unknown-linux-musl                    STD=1 OPENSSL=0.5.5  RUN=1
    - env: TARGET=arm-unknown-linux-musleabihf                  STD=1 OPENSSL=0.5.5  RUN=1
    - env: TARGET=arm-unknown-linux-musleabi                    STD=1 OPENSSL=0.5.5  RUN=1
    # FIXME: enabling openssl makes cargo build fails with:
    #        undefined reference to `__sync_sub_and_fetch_4'
    #        undefined reference to `__sync_add_and_fetch_4'
    - env: TARGET=armv5te-unknown-linux-musleabi                STD=1                RUN=1
    - env: TARGET=armv7-unknown-linux-musleabihf                STD=1 OPENSSL=0.5.5  RUN=1
    - env: TARGET=i586-unknown-linux-musl                       STD=1 OPENSSL=0.5.5  RUN=1
    - env: TARGET=i686-unknown-linux-musl                       STD=1 OPENSSL=0.5.5  RUN=1
    # We only test CPP in mips and mipsl because they use dynamic link by default.
    # The other targets fails with: undefined reference to `__dso_handle'
    # See https://github.com/rust-lang/rust/issues/36710
    - env: TARGET=mips-unknown-linux-musl         CPP=1         STD=1 OPENSSL=0.5.5  RUN=1
    - env: TARGET=mipsel-unknown-linux-musl       CPP=1         STD=1 OPENSSL=0.5.5  RUN=1
    - env: TARGET=x86_64-unknown-linux-musl                     STD=1 OPENSSL=0.5.5  RUN=1 DEPLOY=1

    # Android
    - env: TARGET=aarch64-linux-android           CPP=1         STD=1 OPENSSL=0.5.5  RUN=1
    - env: TARGET=arm-linux-androideabi           CPP=1         STD=1 OPENSSL=0.5.5  RUN=1
    - env: TARGET=armv7-linux-androideabi         CPP=1         STD=1 OPENSSL=0.5.5  RUN=1
    - env: TARGET=i686-linux-android              CPP=1         STD=1 OPENSSL=0.5.5  RUN=1
    - env: TARGET=x86_64-linux-android            CPP=1         STD=1 OPENSSL=0.5.5  RUN=1

    # OSX
    - env: TARGET=i686-apple-darwin               CPP=1 DYLIB=1 STD=1                RUN=1
      os: osx
    - env: TARGET=x86_64-apple-darwin             CPP=1 DYLIB=1 STD=1                RUN=1 DEPLOY=1
      os: osx

    # BSD
    # FIXME: freebsd fails to link when CPP=1
    #- env: TARGET=i686-unknown-freebsd                  DYLIB=1 STD=1 OPENSSL=0.7.17
    - env: TARGET=x86_64-unknown-dragonfly        CPP=1 DYLIB=1       OPENSSL=0.5.5
      rust: nightly
    #- env: TARGET=x86_64-unknown-freebsd                DYLIB=1 STD=1 OPENSSL=0.5.5
    - env: TARGET=x86_64-unknown-netbsd           CPP=1 DYLIB=1 STD=1 OPENSSL=0.7.17

    # Solaris
    - env: TARGET=sparcv9-sun-solaris             CPP=1 DYLIB=1 STD=1 OPENSSL=0.7.17
    - env: TARGET=x86_64-sun-solaris              CPP=1 DYLIB=1 STD=1 OPENSSL=0.7.17

    # Windows
    - env: TARGET=x86_64-pc-windows-gnu           CPP=1         STD=1                RUN=1
    #- env: TARGET=i686-pc-windows-gnu             CPP=1         STD=1                RUN=1

    # Emscripten
    #- env: TARGET=asmjs-unknown-emscripten        CPP=1         STD=1                RUN=1
    - env: TARGET=wasm32-unknown-emscripten                     STD=1

    # Bare metal
    - env: TARGET=thumbv6m-none-eabi                            STD=1
    - env: TARGET=thumbv7em-none-eabi                           STD=1
    - env: TARGET=thumbv7em-none-eabihf                         STD=1
    - env: TARGET=thumbv7m-none-eabi                            STD=1


before_install:
  # workaround for https://github.com/travis-ci/travis-ci/issues/4704
  - python3 -c 'import os,sys; os.set_blocking(sys.stdout.fileno(), True)'

script:
  - bash ci/script.sh

branches:
  only:
    - /^v\d+\.\d+\.\d+.*$/
    - master
    - staging
    - trying

before_deploy:
  - sh ci/before_deploy.sh

deploy:
  - provider: releases
    api_key:
      secure: W1xJIL2bOdrnu0qfqmfMBV9TF34YqmzZzNL9GU9/fpFb/2+cRjBGYxJLRQ2v7wD5B2ThLJAi/NXMG2YjC/gDAu4zjAkshMeKPKGvcu4PgPSEwNYL0C6ubcU6pO2rDmfUv4v/0Urk3LkpzUHkYGSXE7zFOM3zOiMbqryuO9EtYerZoj319/P3vnJaBIEtdFgdLZwLwoHWna/oFq/PU5HsdWWpxD9DYbCmCax16Vyt5UxFkMkU49XYgMspOGDZHSrb/WTvyIZ3hWyu5x5FkpvjQ5Dk00IdXB0cg6biuaryOgN+lXw2TZCSvmZOw4qOcnF+adzy8mOJMGjrCxGbF8Nmq1yM9+9+hkys0mvQKYhxuuKB9Rx7w5PAuGX9vCv4p5Is8xxX6UnB5eaNvTtVpZBFSLdQQEDTzULOxrfHRNDnzXQKj4vvGdo8rVv82GtRgWO99w23OVO8dKdpZ7RSgyuz7haHmJTSw1s7GPcrEfJ+ebEpJNm/RBHYmhfqD8T7V/jkHBgC4x1kpDoBBfbfdfV8OE5Evl8zgz8ygsmbPHFSl+ngj/pLaewI9JL2sP28e8jVhn40vEldBg7lLyGvwNJqsFNOtk+p09Rbs3IgX2iLkUvXnjIJqFtTdSoPLt4me8GRPfg34NcMeUCtwc0h/LLrlUZiHK7hvnRqZLWEaYDEHR8=
    file_glob: true
    file: cross-$TRAVIS_TAG-$TARGET.*
    skip_cleanup: true
    on:
      condition: $DEPLOY = 1
      tags: true
  - provider: script
    script: ./ci/deploy.sh
    skip_cleanup: true
    on:
      condition: $TRAVIS_OS_NAME = linux
      branch: master

before_install:
  - |
    if [ $TRAVIS_OS_NAME = linux ]; then
      docker load --input "$HOME/docker/$TARGET.tar" || true
    fi

before_cache:
  - |
    if [ $TRAVIS_OS_NAME = linux ]; then
      docker save "rustembedded/cross:$TARGET" --output "$HOME/docker/$TARGET.tar"
    fi

cache:
  directories:
    - $HOME/docker

notifications:
  email:
    on_success: never
